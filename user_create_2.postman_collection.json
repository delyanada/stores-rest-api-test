{
	"info": {
		"_postman_id": "2fdfef34-b7b3-4690-9601-5a1b96930b53",
		"name": "user create 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Dupl.User create store and item Copy",
			"item": [
				{
					"name": "/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32f191cd-be23-4bc7-aa77-2187d43ec8e0",
								"exec": [
									"postman.clearEnvironmentVariable(\"access_token\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"User created successfully\"] = jsonData.message === 'User created successfully.';",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6857b5ff-12df-409b-a7f9-488f6e8402c7",
								"exec": [
									"var randVal = _.random(999999999);",
									"pm.environment.set(\"username\", \"rand-\" + randVal);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"abcxyz\"\n}"
						},
						"url": "{{url}}/register"
					},
					"response": []
				},
				{
					"name": "/auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f13ba4c6-5b33-4bfe-a451-24b4b3254505",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\");",
									"",
									"tests[\"Response time is less than 150ms\"] = responseTime < 150;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"abcxyz\"\n}"
						},
						"url": "{{url}}/auth"
					},
					"response": []
				},
				{
					"name": "/store/test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Store name is returned\"] = jsonData.name === 'test_store';",
									"tests[\"Store id is returned\"] = jsonData.id === 1;",
									"tests[\"Store items are an empty list\"] = jsonData.items.length === 0;",
									"",
									"tests[\"Successful POST request\"] = responseCode.code === 201;",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';",
									"",
									"postman.setEnvironmentVariable(\"store_id\", jsonData.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/store/test_store"
					},
					"response": []
				},
				{
					"name": "/item/test_item in test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Item name is returned\"] = jsonData.name === 'test_item';",
									"tests[\"Item price is returned\"] = jsonData.price === 17.99;",
									"tests[\"Successful POST request\"] = responseCode.code === 201;",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"price\": 17.99,\n\t\"store_id\": {{store_id}}\n}"
						},
						"url": "{{url}}/item/test_item"
					},
					"response": []
				},
				{
					"name": "/stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Store 'test_store' is returned\"] = jsonData.stores[0].name === 'test_store';",
									"tests[\"ID of store 'test_store' is returned\"] = jsonData.stores[0].id === parseInt(environment.store_id);",
									"tests[\"Item 'test_item' is returned inside 'test_store'\"] = jsonData.stores[0].items[0].name === 'test_item';",
									"tests[\"Item 'test_item' price is returned inside 'test_store'\"] = jsonData.stores[0].items[0].price === 17.99;",
									"",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/stores"
					},
					"response": []
				},
				{
					"name": "/item/my_item copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Message is returned\"] = jsonData.message === 'Item deleted';",
									"tests[\"Successful POST request\"] = responseCode.code === 200;",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/item/test_item"
					},
					"response": []
				},
				{
					"name": "/store/<name> copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Store name is returned\"] = jsonData.message === 'Store deleted';",
									"tests[\"Successful POST request\"] = responseCode.code === 200;",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/store/test_store"
					},
					"response": []
				}
			],
			"description": "Check user can register.\nCheck user can create store.\nCheck user can create item in store."
		}
	]
}